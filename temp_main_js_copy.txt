const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

(() => {
  const btn = $('.nav-toggle');
  const list = $('#navMenu');
  if (!btn || !list) return;

  const toggle = () => {
    const open = list.classList.toggle('is-open');
    btn.setAttribute('aria-expanded', String(open));
  };
  btn.addEventListener('click', toggle);
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && list.classList.contains('is-open')) {
      list.classList.remove('is-open');
      btn.setAttribute('aria-expanded', 'false');
    }
  });
})();

(() => {
  const toggleBtn = $('.filter-toggle');
  const panel = $('#filterPanel');
  if (!toggleBtn || !panel) return;

  if (!panel.dataset.hydrated) {
    panel.innerHTML = `
      <header style="display:flex;align-items:center;justify-content:space-between;gap:8px;">
        <strong style="font-family:Montserrat,system-ui">Filtros</strong>
        <button id="closeFilters" type="button" aria-label="Fechar" style="border:0;background:transparent;font-size:20px;cursor:pointer">âœ•</button>
      </header>
      <hr style="border:none;border-top:1px solid rgba(16,37,105,.15);margin:10px 0">
      <div style="display:grid;gap:10px">
        <label style="display:flex;gap:8px;align-items:center"><input type="checkbox" data-filter="ti"> Tecnologia</label>
        <label style="display:flex;gap:8px;align-items:center"><input type="checkbox" data-filter="industry"> IndÃºstria</label>
        <label style="display:flex;gap:8px;align-items:center"><input type="checkbox" data-filter="health"> SaÃºde</label>
      </div>
      <div style="height:12px"></div>
      <button id="applyFilters" type="button" style="padding:10px 12px;border-radius:9999px;border:1px solid rgba(16,37,105,.25);background:#edf2f7;cursor:pointer;font-weight:700">Aplicar</button>
    `;
    panel.dataset.hydrated = '1';
  }

  const open = () => {
    panel.hidden = false;
    toggleBtn.setAttribute('aria-expanded', 'true');
    panel.focus?.();
  };
  const close = () => {
    panel.hidden = true;
    toggleBtn.setAttribute('aria-expanded', 'false');
  };

  toggleBtn.addEventListener('click', () => (panel.hidden ? open() : close()));
  panel.addEventListener('click', (e) => {
    if (e.target.id === 'closeFilters') close();
    if (e.target.id === 'applyFilters') {
      toggleBtn.classList.add('applied');
      close();
    }
  });
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !panel.hidden) close();
  });
  document.addEventListener('click', (e) => {
    if (!panel.hidden && !panel.contains(e.target) && e.target !== toggleBtn) close();
  });
})();

(async () => {
  const mapDiv = $('#map');
  if (!mapDiv) return;

  const pulseCss = `
    .pulse-dot{position:relative;width:14px;height:14px;border-radius:50%;background:#ff3b30;border:2px solid #fff;box-shadow:0 0 0 2px rgba(255,59,48,.35)}
    .pulse-dot::after{content:"";position:absolute;inset:-6px;border:2px solid rgba(255,59,48,.65);border-radius:50%;animation:pulse 1.6s ease-out infinite}
    @keyframes pulse{0%{transform:scale(.5);opacity:.9}70%{transform:scale(1.6);opacity:0}100%{opacity:0}}
  `;
  const styleTag = document.createElement('style');
  styleTag.textContent = pulseCss;
  document.head.appendChild(styleTag);

  const inject = (el) => new Promise(res => { el.onload = res; document.head.appendChild(el); });
  await inject(Object.assign(document.createElement('link'), {
    rel: 'stylesheet',
    href: 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css'
  }));
  await inject(Object.assign(document.createElement('script'), {
    src: 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js',
    defer: true
  }));

  const saved = localStorage.getItem('mapslink:view');
  const initial = saved ? JSON.parse(saved) : { center: [-22.909938, -47.062633], zoom: 12 };

  const map = L.map('map', { zoomControl: false }).setView(initial.center, initial.zoom);
  L.control.zoom({ position: 'topright' }).addTo(map);

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OSM</a> contributors'
  }).addTo(map);

  map.on('moveend', () => {
    const c = map.getCenter();
    localStorage.setItem('mapslink:view', JSON.stringify({ center: [c.lat, c.lng], zoom: map.getZoom() }));
  });

  const geoBtn = L.control({ position: 'topright' });
  geoBtn.onAdd = () => {
    const btn = L.DomUtil.create('button', '');
    btn.title = 'Minha localizaÃ§Ã£o (g)';
    btn.setAttribute('aria-label', 'Minha localizaÃ§Ã£o');
    btn.style.cssText = 'margin:6px;padding:8px;border-radius:9999px;border:1px solid rgba(0,0,0,.25);background:#fff;cursor:pointer';
    btn.textContent = 'âŠ™';
    btn.onclick = () => locate();
    return btn;
  };
  geoBtn.addTo(map);

  function locate() {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition((pos) => {
      const { latitude, longitude } = pos.coords;
      map.flyTo([latitude, longitude], 15, { duration: 0.8 });
      addPulseMarker([latitude, longitude], 'VocÃª estÃ¡ aqui');
    });
  }

  function addPulseMarker(latlng, title = '') {
    const icon = L.divIcon({ className: 'pulse-dot', html: '', iconSize: [14,14] });
    const m = L.marker(latlng, { icon }).addTo(map);
    if (title) m.bindPopup(title).openPopup();
    return m;
  }

  const form = $('.search-bar');
  const input = $('#search');
  let lastMarker = null;

  async function geocode(q) {
    const url = new URL('https://nominatim.openstreetmap.org/search');
    url.searchParams.set('q', q);
    url.searchParams.set('format', 'jsonv2');
    url.searchParams.set('addressdetails', '1');
    url.searchParams.set('limit', '1');
    url.searchParams.set('countrycodes', 'br');
    const res = await fetch(url.toString(), { headers: { 'Accept-Language': 'pt-BR' } });
    if (!res.ok) throw new Error('Falha na busca');
    const data = await res.json();
    return data[0];
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const q = input?.value?.trim();
    if (!q) return;

    form.classList.add('loading');
    try {
      const hit = await geocode(q);
      if (!hit) return;

      const lat = parseFloat(hit.lat), lon = parseFloat(hit.lon);
      if (lastMarker) map.removeLayer(lastMarker);
      map.flyTo([lat, lon], 16, { duration: 0.9 });
      lastMarker = addPulseMarker([lat, lon], hit.display_name);
    } catch (err) {
      console.warn(err);
    } finally {
      form.classList.remove('loading');
    }
  });

  document.addEventListener('keydown', (e) => {
    if (['INPUT','TEXTAREA'].includes(document.activeElement?.tagName)) return;
    if (e.key === '/') { e.preventDefault(); input?.focus(); }
    if (e.key.toLowerCase() === 'f') { $('.filter-toggle')?.click(); }
    if (e.key.toLowerCase() === 'g') { locate(); }
  });
})();
